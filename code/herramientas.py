import pandas as pd
import numpy as np
import time
import datetime
import sys
import os
import subprocess 
from scipy.signal import savgol_filter
from scipy.signal import argrelextrema
from scipy.signal import find_peaks
import os
import matplotlib.pyplot as plt

masa_molar_agua = 18
Na = 6.022*1e23

class herramientas(object):
    
    def df2xyz(self, df, path, frame):
        
        with open(path, 'w') as fp:
            fp.write("    {}".format(len(df)))
            fp.write("\nframe   {}".format(frame))
            
            for idx in df.index:
                sym = df['symbol'].loc[idx]
                x = df['x'].loc[idx]*10
                y = df['y'].loc[idx]*10
                z = df['z'].loc[idx]*10
                
                fp.write("\n{}     {:6.3f}   {:6.3f}   {:6.3f}".format(sym, x, y, z))
                
        return


    def df2xyzb(self, **kwargs):

        path = kwargs.get("path", "NULL")
        df = kwargs.get("df", {})
        frame = kwargs.get("frame", "0")
        factor = kwargs.get("factor", 10)
        
        with open(path, 'w') as fp:
            fp.write("    {}".format(len(df)))
            fp.write("\nframe   {}".format(frame))
            
            for idx in df.index:
                sym = df['symbol'].loc[idx]
                x = df['x'].loc[idx]*factor
                y = df['y'].loc[idx]*factor
                z = df['z'].loc[idx]*factor
                
                fp.write("\n{}     {:6.3f}   {:6.3f}   {:6.3f}".format(sym, x, y, z))
                
        return


    def df2gro(self, **kwargs):

        df = kwargs.get("df", "NULL")
        name = kwargs.get("name", "gro")
        path = kwargs.get("path", "NULL")
        frame = kwargs.get("frame", 0)
        box = kwargs.get("box", [20, 20, 20])
        flag_velocities = kwargs.get("flag_velocities", True)
        
        ftype = kwargs.get("ftype", 'w')

        # Lx = box['x'].iloc[0]
        # Ly = box['y'].iloc[0]
        # Lz = box['z'].iloc[0]

        Lx, Ly, Lz = box

        with open(path, ftype) as fp:
            txt = 'Generated by trjconv : {} t=   {}\n'.format(name, frame)
            fp.write(txt)
            fp.write("    {}\n".format(len(df)))
            
            if flag_velocities:
                for idx in df.index:
                    sym = df['symbol'].loc[idx]
                    sym2 = df['symbol2'].loc[idx]
                    x = df['x'].loc[idx]
                    y = df['y'].loc[idx]
                    z = df['z'].loc[idx]
                    vx = df['vx'].loc[idx]
                    vy = df['vy'].loc[idx]
                    vz = df['vz'].loc[idx]

                    tipo = df['tipo'].loc[idx]
                    symbol = df['symbol'].loc[idx]
                    tipo_mol = df['tipo mol'].loc[idx]

                    c = len(tipo_mol)
                    ntipo = int(tipo[:-c])
                    wtipo = tipo[-c:]

                    fp.write("{:>5d}{:<7}{:>3}{:>5}".format(ntipo, tipo_mol, symbol, idx))
                    fp.write("{:>8.3f}{:>8.3f}{:>8.3f}".format(x, y, z))
                    fp.write("{:>8.4f}{:>8.4f}{:>8.4f}\n".format(vx, vy,vz))
                fp.write("{:>9.4f}{:>9.4f}{:>9.4f}\n".format(Lx, Ly, Lz))
            else:  
                for idx in df.index:
                    sym = df['symbol'].loc[idx]
                    sym2 = df['symbol2'].loc[idx]
                    x = df['x'].loc[idx]
                    y = df['y'].loc[idx]
                    z = df['z'].loc[idx]

                    tipo = df['tipo'].loc[idx]
                    symbol = df['symbol'].loc[idx]
                    tipo_mol = df['tipo mol'].loc[idx]

                    c = len(tipo_mol)
                    ntipo = int(tipo[:-c])
                    wtipo = tipo[-c:]

                    fp.write("{:>5d}{:<7}{:>3}{:>5}".format(ntipo, tipo_mol, symbol, idx))
                    fp.write("{:>8.3f}{:>8.3f}{:>8.3f}\n".format(x, y, z))
                fp.write("{:>9.4f}{:>9.4f}{:>9.4f}\n".format(Lx, Ly, Lz))  
                
                
        return


    def append_df2xyz(self, df, path, frame):

        with open(path, 'a') as fp:
            fp.write("\n    {}".format(len(df)))
            fp.write("\nframe   {}".format(frame))

            for idx in df.index:
                sym = df['symbol'].loc[idx]
                x = df['x'].loc[idx]
                y = df['y'].loc[idx]
                z = df['z'].loc[idx]

                fp.write("\n{}     {:6.3f}   {:6.3f}   {:6.3f}".format(sym, x, y, z))
                    
        return


    def create_movie(self, dic, PATH_MOVIE):

        keys = list(dic.keys())
        df_keys = pd.DataFrame(keys)
        df_keys = df_keys.sort_values(by=0)
        df_keys = df_keys.reset_index(drop=True)        
        
        key = df_keys[0].loc[0]

        df = dic[key]['df']
        self.df2xyz(df, PATH_MOVIE, key)
        
        key_index = list(df_keys.index)

        for ik in key_index[1:]:
            
            key = df_keys[0].loc[ik]    
            
            df = dic[key]['df']
            self.append_df2xyz(df, PATH_MOVIE, key)


        return

    def create_gro_movie(self, dic, df_box, PATH_MOVIE):

        keys = list(dic.keys())

        # frame cero
        key = keys[0]
        df = dic[key]['df']
        box = df_box.loc[[key]]
        self.df2gro(df, box, PATH_MOVIE, key)

        for key in keys[1:]:
            df = dic[key]['df']
            self.append_df2xyz(df, box, PATH_MOVIE, key)


        return



    def assign_masses(self, df):

        dic = {}
        dic['masa'] = {}
        for idx in df.index:
            
            sym = df['symbol2'].loc[idx]

            if sym == 'PB':
                m = 207.2
            elif sym == 'S3':
                m = 32.065
            else:
                m = 1.0

            dic['masa'][idx] = m

        return pd.DataFrame(dic)


                
    def get_CM_from_frame(self, **kwargs):

        df_m = kwargs.get('df_m', pd.DataFrame(['empty']))
        df = kwargs.get('df', pd.DataFrame(['empty']))

        if df_m.iloc[0, 0] == 'empty':
            # tomar centro geometrico
            dic = {}
            dic['cmx'] = {}
            dic['cmy'] = {}
            dic['cmz'] = {}

            cmx = df['x'].mean()
            cmy = df['y'].mean()
            cmz = df['z'].mean()
            
            key = 0
            dic['cmx'][key] = cmx
            dic['cmy'][key] = cmy
            dic['cmz'][key] = cmz

            return pd.DataFrame(dic)

        else:

            dic = {}
            dic['cmx'] = {}
            dic['cmy'] = {}
            dic['cmz'] = {}

            sm = df_m['masa']
            mt = df_m['masa'].sum()

            sx = df['x']
            sy = df['y']
            sz = df['z']

            cmx = np.divide(sm.dot(sx), mt)
            cmy = np.divide(sm.dot(sy), mt)
            cmz = np.divide(sm.dot(sz), mt)

            key = 0
            dic['cmx'][key] = cmx
            dic['cmy'][key] = cmy
            dic['cmz'][key] = cmz

            return pd.DataFrame(dic)
   
    
    def getLcube_A(self, path_xyz, p, N):

        M = self.molar_mass(path=path_xyz)
        a = np.prod([N, M, 1e4])
        b = np.multiply(6.02214076, p)

        return np.power(np.divide(a,b), 1/3)    

    def xvg2df_3(self, **kwargs):
        
        path = kwargs.get('path', "NULL")
        xx = kwargs.get('x', 'x')
        yy = kwargs.get('y', 'y')
        zz = kwargs.get('z', 'z')

        with open(path, 'r') as fp:
            
            dic_gr = {}
            dic_gr[xx] = {}
            dic_gr[yy] = {}
            dic_gr[zz] = {}
            
            i = 0
            for line in fp:
                sp = line.split()
                
                
                if sp[0] not in ['#', '@', '@TYPE', 'r', 'g']:
                
                    try:
                        r = float(sp[0])
                    except:
                        print("not a number, pass")
                        continue
                
                    r = float(sp[0])
                    gr = float(sp[1])
                    gr2 = float(sp[2])

                    dic_gr[xx][i] = r
                    dic_gr[yy][i] = gr
                    dic_gr[zz][i] = gr2
                    
                    i+=1

        return pd.DataFrame(dic_gr)

    def get_minmax_df(self, **kwargs):
        
        df = kwargs.get("df", "NULL")
        
        min_z = df['z'].min()
        max_z = df['z'].max()

        min_x = df['x'].min()
        max_x = df['x'].max()

        min_y = df['y'].min()
        max_y = df['y'].max()

        dic = {}

        dic['min'] = {}
        dic['max'] = {}

        dic['min']['x'] = df['x'].min()
        dic['max']['x'] = df['x'].max()

        dic['min']['y'] = df['y'].min()
        dic['max']['y'] = df['y'].max()

        dic['min']['z'] = df['z'].min()
        dic['max']['z'] = df['z'].max()


        return pd.DataFrame(dic)

    def get_minmax_dims(self, **kwargs):
        
        df = kwargs.get("df", {})
        df = df.copy()
        
        min_z = df['min'].loc['z']
        max_z = df['max'].loc['z']

        min_x = df['min'].loc['x']
        max_x = df['max'].loc['x']

        min_y = df['min'].loc['y']
        max_y = df['max'].loc['y']
        
        xdim = max_x - min_x
        ydim = max_y - min_y
        zdim = max_z - min_z
        
        dic = {}
        dic['xdim'] = {}
        dic['ydim'] = {}
        dic['zdim'] = {}
        
        dic['xdim'][0] = xdim
        dic['ydim'][0] = ydim
        dic['zdim'][0] = zdim
        
        return pd.DataFrame(dic)


    def get_center_of_space_orthogonal(self, **kwargs):
        
        df = kwargs.get("df", "NULL")

        tmp1 = self.get_minmax_df(df=df)
        tmp2 = self.get_minmax_dims(df=tmp1)

        minz = tmp1['min'].loc["z"]
        minx = tmp1['min'].loc["x"]
        miny = tmp1['min'].loc["y"]

        maxz = tmp1['max'].loc["z"]
        maxx = tmp1['max'].loc["x"]
        maxy = tmp1['max'].loc["y"]

        dimz = tmp2['zdim'].loc[0]
        dimx = tmp2['xdim'].loc[0]
        dimy = tmp2['ydim'].loc[0]

        cmx = minx + dimx/2 
        cmy = miny + dimy/2 
        cmz = minz + dimz/2
       
        dic = {}
        dic['cmx'] = {}
        dic['cmy'] = {}
        dic['cmz'] = {}

        key = 0
        dic['cmx'][key] = cmx
        dic['cmy'][key] = cmy
        dic['cmz'][key] = cmz
        
        
        return pd.DataFrame(dic)
    
    
    def xyz2df(self, path):

        dic = {}
        dic['symbol'] = {}
        dic['x'] = {}
        dic['y'] = {}
        dic['z'] = {}
        
        F = open(path, 'r')
        line =  F.readline()
        atoms = float(line.split()[0])
        line = next(F)

        i = 1
        for line in F:
            
            symbol = line.split()[0]
            x = float(line.split()[1])
            y = float(line.split()[2])
            z = float(line.split()[3])
            
            dic['symbol'][i] = symbol
            dic['x'][i] = x
            dic['y'][i] = y
            dic['z'][i] = z
            
            if i >= atoms:
                break
            i+=1

        return pd.DataFrame(dic)

