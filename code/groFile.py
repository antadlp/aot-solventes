import pandas as pd
import numpy as np
import os
from herramientas import *
from pyparsing import *

herr = herramientas()

class groFile(object):
    
    def __init__(self, path):
        self.path_input = path
        self.dic_grl = {}


        return 
    def _pre_get_general_info(self):
        
        dic_grl = {}

        flag_trjconv = False
        flag_velocities = False
        flag_pegados = False
        num_cols = 0

        with open(self.path_input) as f:
            try:
                line=next(f)
            except Exception as e:
                print("ERROR: NO SE PUEDE LEER PRIMER LINEA!")

            if 'Generated by trjconv' in line:
                flag_trjconv = True
            else:
                flag_trjconv = False

            # velocidades o nop?
            try:
                line=next(f)
            except Exception as e:
                print(e)

            try:
                line=next(f)
            except Exception as e:
                print(e)
                
            num_cols = len(line.split())
            if num_cols == 9:
                flag_velocities = True


        fidx = 1
        with open(self.path_input) as f:

            frame_counter = 0
            ntime = frame_counter
            flag_grl = True
            while flag_grl:
                try:
                    line=next(f)
                except Exception as e:
                    flag_grl = False
                    break

                if flag_trjconv:
                    time = float(line.split()[-1])
                    if time <= ntime:
                        time = frame_counter
                    ntime = time
                else:
                    time = frame_counter

                dic_grl[time] = {}

                dic_df = {}
                dic_df['tipo'] = {}
                dic_df['symbol'] = {}
                dic_df['symbol2'] = {}
                dic_df['x'] = {}
                dic_df['y'] = {}
                dic_df['z'] = {}
                dic_df['vx'] = {}
                dic_df['vy'] = {}
                dic_df['vz'] = {}  

                # Linea de numero de atomos
                try:
                    line=next(f)
                    num_atomos = int(line.split()[0])
                except Exception as e:
                    flag_grl = False
                    break

                # Lineas de coords, vel
                flag_frame = True
                linea_atomo = 1
                while((flag_frame) and (linea_atomo <= num_atomos)):
                    try:
                        line=next(f)
                    except Exception as e:
                        flag_frame = False
                        flag_grl = False
                        break
                    
                    sp = line.split()
                    # verificar cols pegadas
                    if len(sp) == num_cols:
                        # aun separadas, todo bien
                        flag_pegados = False
                        idx = int(sp[2])
                        fidx = idx
                        sym = sp[1]
                    else:

                        flag_pegados = True
                        nextIdx = fidx + 1
                        # se deberia verificar
                        # que fidx coincida con el valor
                        # que se extraiga del string pegado
                        idx = nextIdx
                        fidx = idx
                        
                        tmp_sp2 = sp[1]
                        tmp_sp2 = tmp_sp2.replace(str(fidx), '', 1)
                        sym = tmp_sp2
                        
                    dic_df['tipo'][idx] = sp[0]

                    sym1 = sym.title()

                    dic_df['symbol'][idx] = sym
                    dic_df['symbol2'][idx] = sym1
                    
                    if flag_pegados:

                        dic_df['x'][idx] = float(sp[3 - 1])
                        dic_df['y'][idx] = float(sp[4 - 1])
                        dic_df['z'][idx] = float(sp[5 - 1])

                        if flag_velocities:
                            dic_df['vx'][idx] = float(sp[6 - 1])
                            dic_df['vy'][idx] = float(sp[7 - 1])
                            dic_df['vz'][idx] = float(sp[8 - 1])
                        else:
                            dic_df['vx'][idx] = 0.0
                            dic_df['vy'][idx] = 0.0
                            dic_df['vz'][idx] = 0.0
                            
                    else:
                        
                        dic_df['x'][idx] = float(sp[3])
                        dic_df['y'][idx] = float(sp[4])
                        dic_df['z'][idx] = float(sp[5])

                        if flag_velocities:
                            dic_df['vx'][idx] = float(sp[6])
                            dic_df['vy'][idx] = float(sp[7])
                            dic_df['vz'][idx] = float(sp[8])
                        else:
                            dic_df['vx'][idx] = 0.0
                            dic_df['vy'][idx] = 0.0
                            dic_df['vz'][idx] = 0.0
                            

                    linea_atomo+=1

                dic_grl[time]['df'] = pd.DataFrame(dic_df)
                line=next(f)
                dic_grl[time]['boxdim'] = np.array(line.split()).astype(np.float)

                frame_counter+=1

        self.dic_grl = dic_grl
                
        return self.dic_grl
        
    def get_time_keys(self):
        
        return list(self.dic_grl.keys())


    def get_box_dims(self):

        keys = self.get_time_keys()

        dic = {}
        dic['x'] = {}
        dic['y'] = {}
        dic['z'] = {}

        for key in keys:

            dims = self.dic_grl[key]['boxdim']

            Lx = dims[0]
            Ly = dims[1]
            Lz = dims[2]

            dic['x'][key] = Lx
            dic['y'][key] = Ly
            dic['z'][key] = Lz


        return pd.DataFrame(dic)

        
    def get_CM(self, **kwargs):

        keys = self.get_time_keys()

        df_m = kwargs.get('df_m', pd.DataFrame(['empty']))

        if df_m.iloc[0, 0] == 'empty':
            # tomar centro geometrico
            dic = {}
            dic['cmx'] = {}
            dic['cmy'] = {}
            dic['cmz'] = {}

            for key in keys:

                df = self.dic_grl[key]['df']

                cmx = df['x'].mean()
                cmy = df['y'].mean()
                cmz = df['z'].mean()

                dic['cmx'][key] = cmx
                dic['cmy'][key] = cmy
                dic['cmz'][key] = cmz


            return pd.DataFrame(dic)

        else:

            dic = {}
            dic['cmx'] = {}
            dic['cmy'] = {}
            dic['cmz'] = {}

            sm = df_m['masa']
            mt = df_m['masa'].sum()
            for key in keys:

                df = self.dic_grl[key]['df']

                sx = df['x']
                sy = df['y']
                sz = df['z']

                cmx = np.divide(sm.dot(sx), mt)
                cmy = np.divide(sm.dot(sx), mt)
                cmz = np.divide(sm.dot(sx), mt)

                dic['cmx'][key] = cmx
                dic['cmy'][key] = cmy
                dic['cmz'][key] = cmz

            return pd.DataFrame(dic)

    def get_df_keys(self):

        keys = self.get_time_keys()
        df_keys = pd.DataFrame(keys)
        df_keys = df_keys.sort_values(by=0)
        df_keys = df_keys.reset_index(drop=True)

        return df_keys

    def get_tipos_mols(self):

        dic = self.dic_grl
        df_keys = self.get_df_keys()
        key0 = df_keys[0].iloc[0]
        df = dic[key0]['df']

        return list(df['tipo mol'].unique())
            
 
    def get_general_info(self):

        dic = self._pre_get_general_info()
        df_keys = self.get_df_keys()
        key0 = df_keys[0].iloc[0]
        dd_df = dic[key0]['df']

        parsing_tipo = Word(nums) + Word(alphas) # pos riesgo
        tipos_mols = []
        dic_tipos = {}
        dic_tipos['tipo mol'] = {}
        for idx in dd_df.index:
            tipo = dd_df['tipo'].loc[idx]
            num_mol = parsing_tipo.parseString(tipo).asList()[0]
            
            tipo_mol = tipo.replace(num_mol, '', 1)
            tipos_mols.append(tipo_mol)
            dic_tipos['tipo mol'][idx] = tipo_mol


        tmp_df = pd.DataFrame(dic_tipos)
        for idx in df_keys.index:
            key = df_keys[0].loc[idx]
            df = dic[key]['df']
            df = df.join(tmp_df)
            
            df = df[['tipo', 'tipo mol', 'symbol', 'symbol2', 'x', 'y', 'z', 'vx', 'vy', 'vz']]
            dic[key]['df'] = df

        self.dic_grl = dic

        return self.dic_grl


    def get_mols_info(self):
       
        dic_grl = self.dic_grl
        df_keys = self.get_df_keys()
        key0 = df_keys[0].iloc[0]
        df = dic_grl[key0]['df']
        parsing_tipo = Word(nums) + Word(alphas)
        tipos_mol = self.get_tipos_mols()

        dic = {}
        dic['tipo mol'] = {}
        dic['min num'] = {}
        dic['max num'] = {}
        dic['total num'] = {}
        dic['len one num'] = {}
        dic['len full num'] = {}

        counter = 1
        for tipo_mol in tipos_mol:
            
            nnums = []
            for idx in df.index:
                
                tipo = df['tipo'].loc[idx]
                num_mol = parsing_tipo.parseString(tipo).asList()[0]
                tmol = tipo.replace(num_mol, '', 1)
                
                if tipo_mol in tmol:
                    num = tipo.replace(tipo_mol, '', 1)
                    nnums.append(num)
            
            _ = [int(value) for value in nnums]
            red_nums = list(set(_))
                    
            dic['tipo mol'][counter] = tipo_mol
            dic['total num'][counter] = len(red_nums)
            dic['min num'][counter] = min(red_nums)
            dic['max num'][counter] = max(red_nums)
            dic['len one num'][counter] = int(len(_)/len(red_nums))
            dic['len full num'][counter] = len(_)
                
            counter+=1

        dfn = pd.DataFrame(dic)
        dfn = dfn[['tipo mol', 'total num', 'min num', 'max num', 'len one num', 'len full num']]

        return dfn



